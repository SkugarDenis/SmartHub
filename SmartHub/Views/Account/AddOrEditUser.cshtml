@model SmartHub.Models.AddOrEditUserViewModel

<style>
    .btn {
        background-color: #3199ad;
        padding: 10px;
        border: none;
        cursor: pointer;
        color: #333;
    }

        .btn:hover {
            background-color: #3199ad;
            color: black;
        }

    .div-box {
        width: 100%;
        padding: 20px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    input[type="text"],
    input[type="password"],
    input[type="submit"] {
        width: calc(100% - 22px);
        padding: 10px;
        margin: 8px 0;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    input[type="submit"] {
        width: 100%;
        background-color: #3199ad;
        color: #333;
        border: none;
        cursor: pointer;
    }

        input[type="submit"]:hover {
            background-color: #3199ad;
            color: black;
        }

    /* Модальное окно стилей */
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
</style>

<div style="padding-top:100px;">
    <div class="div-box">
        <h2>Создание нового пользователя</h2>
        <div>
            <form id="createUserForm">
                <label for="username">Логин:</label>
                <input type="text" id="username" placeholder="Enter username"><br><br>
                <label for="password">Пароль:</label>
                <input type="password" id="password" placeholder="Enter password"><br><br>
                <button class="btn" style="background-color:#3199ad; padding:10px; border-width: 0px;" type="button" onclick="createUser()">Создать</button>
            </form>
        </div>
    </div>

    <div style="margin-top:20px;" class="div-box">
        <h2>Список пользователей</h2>
        <table style="width: 100%; border-collapse: collapse;">
            <tr>
                <th style="border: 1px solid #ccc; padding: 8px;">Логин</th>
                <th style="border: 1px solid #ccc; padding: 8px;">Роли</th>
                <th style="border: 1px solid #ccc; padding: 8px;">Действие</th>
            </tr>
            @foreach (var item in Model.users)
            {
                <tr>
                    <td style="border: 1px solid #ccc; padding: 8px;">@item.UserName</td>
                    <td style="border: 1px solid #ccc; padding: 8px;">
                        @foreach (var role in item.Roles)
                        {
                            <span>@role.Name</span>
                            <!--<button class="btn" onclick="deleteUserRole('@item.UserId', '@role.Id')">Удалить</button>-->
                        }
                    </td>
                    <td style="border: 1px solid #ccc; padding: 8px;">
                        <button class="btn" style="background-color: #3199ad; padding: 10px 10px; border: none; cursor: pointer; margin-right: 5px;" onclick="deleteUser('@item.UserId')">Удалить пользователя</button>
                        <button class="btn" style="background-color: #3199ad; padding: 10px 10px; border: none; cursor: pointer;" onclick="openEditModal('@item.UserId')">Изменить</button>
                    </td>
                </tr>
            }
        </table>
    </div>
</div>

<!-- Модальное окно для редактирования пользователя -->
<div id="editUserModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeEditModal()">&times;</span>
        <h2>Изменение пользователя</h2>
        <form id="editUserForm">
            <input type="hidden" id="editUserId" value="">
            <label for="editUsername">Логин:</label>
            <input type="text" id="editUsername" placeholder="Enter username"><br><br>
            <h3>Выберите роли:</h3>
            @if (Model.roles != null)
            {
                @foreach (var role in Model.roles)
                {
                    @if (role.Name.Equals("admin"))
                    {
                        continue;
                    }

                    <div>
                        <input type="checkbox" id="@role.Id" value="@role.Id">
                        <label for="@role.Id">@role.Name</label>
                    </div>
                }
            }
            <button class="btn" style="background-color:#3199ad; padding:10px; border-width: 0px;" type="button" onclick="updateUser()">Изменить</button>
        </form>
    </div>
</div>
<script>
    function createUser() {
        var username = document.getElementById("username").value;
        var password = document.getElementById("password").value;

        var formData = new URLSearchParams();
        formData.append('UserName', username);
        formData.append('Password', password);

        fetch('/Account/AddNewUser', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: formData
        })
            .then(response => {
                if (response.ok) {
                    console.log("Пользователь успешно создан");
                } else {
                    throw new Error("Ошибка создания пользователя");
                }
            })
            .catch(error => {
                console.log("Ошибка создания пользователя");
            });

         //window.location.href = "/Account/AddOrEditUser";
    }

    function deleteUser(userId) {

        var formData = new URLSearchParams();
        formData.append('UserId', userId);

        fetch('/Account/DeleteUser', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: formData
        })
            .then(response => {
                if (response.ok) {
                    console.log("Пользователь успешно удален");
                } else {
                    throw new Error("Ошибка удаления пользователя");
                }
            })
            .catch(error => {
                console.log("Ошибка удаления пользователя");
            });

            //window.location.href = "/Account/AddOrEditUser";
    }
    // Функция открытия модального окна редактирования пользователя
      function openEditModal(userId) {
        console.log(userId);
        document.getElementById('editUserId').value = userId;
        document.getElementById('editUserModal').style.display = "block";
    }

    // Функция закрытия модального окна редактирования пользователя
    function closeEditModal() {
        document.getElementById('editUserModal').style.display = "none";
    }

    // Функция обновления пользователя с добавлением ролей
    function updateUser() {
        var userId = document.getElementById("editUserId").value;
        var username = document.getElementById("editUsername").value;
        var roles = [];

        // Получаем выбранные роли
        var roleCheckboxes = document.querySelectorAll("input[type='checkbox']");
        roleCheckboxes.forEach(checkbox => {
            if (checkbox.checked) {
                roles.push(checkbox.value);
            }
        });

        var formData = new URLSearchParams();
        formData.append('UserId', userId);
        formData.append('UserName', username);

        // Добавляем выбранные роли к данным формы
        roles.forEach(roleId => {
            formData.append('Roles', roleId);
        });

        fetch('/Account/UpdateUserWithRoles', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: formData
        })
            .then(response => {
                if (response.ok) {
                    console.log("Пользователь успешно обновлен");
                    // Закрываем модальное окно
                    closeEditModal();
                    // Перезагружаем страницу для отображения изменений
                    window.location.reload();
                } else {
                    throw new Error("Ошибка обновления пользователя");
                }
            })
            .catch(error => {
                console.log("Ошибка обновления пользователя");
                console.log(error);
            });
    }

    function deleteUserRole(userId, roleId) {
        var formData = new URLSearchParams();
        formData.append('UserId', userId);
        formData.append('RoleId', roleId);

        fetch('/Account/DeleteUserRole', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: formData
        })
            .then(response => {
                if (response.ok) {
                    console.log("Роль успешно удалена");
                    // Перезагрузим страницу для обновления данных
                    window.location.reload();
                } else {
                    throw new Error("Ошибка удаления роли");
                }
            })
            .catch(error => {
                console.log("Ошибка удаления роли");
                console.log(error);
            });
    }

</script>